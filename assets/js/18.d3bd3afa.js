(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{276:function(n,s,a){"use strict";a.r(s);var e=a(0),t=Object(e.a)({},function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象","aria-hidden":"true"}},[n._v("#")]),n._v(" 面向对象")]),n._v(" "),a("p",[a("strong",[n._v("1. 面向对象三要素")]),a("br"),n._v("\n什么是面向对象？面向对象程序设计（Object Oriented Programming，OOP）是一种计算机编程架构，面向对象将问题抽象出具体的对象，而这个对象有自己的属性和方法，在解决问题的时候将不同的对象组合在一起使用，使得代码的重用性、灵活性和扩展性增强。\nJavaScript 本身就是面向对象的，只是它实现面向对象的方式和主流的流派不太一样。JavaScript 是基于原型的面向对象系统， 而其它语言大多是基于类去描述面向对象的。\njs面向对象主要特征有：封装、继承、多态")]),n._v(" "),a("ul",[a("li",[n._v("封装"),a("br"),n._v("\n把客观事物封装成抽象的类，隐藏属性和方法的实现细节，仅对外公开接口, 也就是说，封装就是将属性和方法组成一个类的过程就称之为封装。")]),n._v(" "),a("li",[n._v("继承"),a("br"),n._v("\n原型链继承")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("//多个实例对引用类型操作会被篡改\n function Animal() {\n    this.name = 'cat'\n    this.msg = {\n      age: 9\n    }\n  }\n  Animal.prototype.greet = function () {\n    console.log('hehe')\n  }\n  function Dog() {\n    this.name = 'dog'\n  }\n  Dog.prototype = new Animal()  //核心一步\n\n  const a = new Dog()\n  a.msg.age = '99'\n  const b = new Animal()\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("p",[n._v("构造函数继承")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("//只能继承父类的实例属性和方法，不能继承原型属性/方法。性能不好，每个子类都会拥有父类实例的副本。\nfunction Animal() {\n    this.name = 'cat'\n    this.msg = {\n      age: 9\n    }\n  }\n  Animal.prototype.greet = function () {\n    console.log('hehe')\n  }\n  function Dog() {\n   Animal.call(this)            // 核心一步\n  }\nconst a=new Dog()\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("组合继承")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("//将上两种方法结合起来\nfunction Animal() {\n    this.name = 'cat'\n    this.msg = {\n      age: 9\n    }\n  }\n  Animal.prototype.greet = function () {\n    console.log('hehe')\n  }\n  function Dog() {\n   Animal.call(this)            // 核心一步\n  }\n  Dog.prototype = new Animal()  // 核心一步\nconst a=new Dog()\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("原型式继承:利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("//不能做到函数复用 共享引用类型属性的值 无法传递参数\nfunction inheritObject(obj){\n    function F(){};\n    F.prototype = obj;\n    return new F();\n}\n\nvar situation = {\n    companies:['bigo','yy','uc'];\n    area:'guangzhou';\n}\n\nvar situationA = inheritObject(situation);\nconsole.log(situationA.area)     //'guangzhou'\n\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("寄生式继承:在原型式继承的基础上，增强对象，返回构造函数.")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('//不能做到函数复用 共享引用类型属性的值 无法传递参数\n function createAnother(original){\n  var clone = object(original); // 或 Object.create(original) \n  clone.sayHi = function(){  // 以某种方式来增强对象\n    alert("hi");\n  };\n  return clone; // 返回这个对象\n}\nvar person = {\n  name: \'Nicholas\',\n  friends : ["Shelby","Coury","Van"]\n}\n\nvar anotherPerson  = createAnother(person) \n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("class类实现继承(es6)")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class A {\n}\n\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("子类B在constructor中的super指向父类的构造函数。在继承时一定要调用，这是必须的，否则 JavaScript 引擎会报错。\n虽然是调用父类的构造函数但是super内部的this指向的是B")]),n._v(" "),a("p",[n._v("super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Parent {\n  static myMethod(msg) {\n    console.log('static', msg);\n  }\n\n  myMethod(msg) {\n    console.log('instance', msg);\n  }\n}\n\nclass Child extends Parent {\n  static myMethod(msg) {\n    super.myMethod(msg);\n  }\n\n  myMethod(msg) {\n    super.myMethod(msg);\n  }\n}\n\nChild.myMethod(1); // static 1\n\nvar child = new Child();\nchild.myMethod(2); // instance 2\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://juejin.im/post/6844903924015120397",target:"_blank",rel:"noopener noreferrer"}},[n._v("其他介绍"),a("OutboundLink")],1)]),n._v(" "),a("ul",[a("li",[n._v("多态"),a("br"),n._v(" "),a("a",{attrs:{href:"https://juejin.im/post/6866286190107033608",target:"_blank",rel:"noopener noreferrer"}},[n._v("相关介绍"),a("OutboundLink")],1)])]),n._v(" "),a("p",[a("strong",[n._v("2. 面向过程")]),a("br"),n._v("\n面向过程侧重去解决一个问题的具体步骤，先做什么再做什么，一步一步调用函数。")]),n._v(" "),a("p",[a("strong",[n._v("3. 面向对象和过程的联系和区别")]),a("br"),n._v("\n面向对象和面向过程的侧重点是不同的，面向对象侧重将解决一个问题抽象成一个对象，对象有自己的属性和方法，以功能来划分问题；面向过程侧重去解决一个问题的具体步骤，先做什么再做什么，一步一步调用函数。"),a("br"),n._v("\n举个栗子：“把大象放冰箱” 用面向过程和面向对象的不同实现思路："),a("br"),n._v("\n(1)  面向过程："),a("br"),n._v("\n开门（冰箱）"),a("br"),n._v("\n装进去（冰箱，大象）"),a("br"),n._v("\n关门（冰箱）"),a("br"),n._v("\n(2)  面向对象："),a("br"),n._v("\n冰箱.开门()"),a("br"),n._v("\n冰箱.装进去（大象）"),a("br"),n._v("\n冰箱.关门（）")]),n._v(" "),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[n._v("#")]),n._v(" 数据类型")]),n._v(" "),a("p",[a("strong",[n._v("1. 基础数据类型")]),a("br"),n._v("\n7大原始类型与Object类型"),a("br"),n._v(" "),a("strong",[n._v("string")]),n._v(":  由多个16位Unicode字符组成的字符序列，有单引号或双引号表示"),a("br"),n._v(" "),a("strong",[n._v("number")]),n._v(":  表示整数和浮点数值"),a("br"),n._v(" "),a("strong",[n._v("bigint")]),n._v(":  新增的一种内置对象，它提供了一种方法来表示大于 2^53 - 1 的整数,表示任意大的整数,可以用在一个整数字面量后面加 n 的方式定义一个 BigInt ，如：10n，或者调用函数BigInt()"),a("br"),n._v(" "),a("strong",[n._v("boolean")]),n._v(":  有两个字面值，true和false"),a("br"),n._v(" "),a("strong",[n._v("null")]),n._v(":  只有一个值的数据类型，值为null.表示一个空对象指针，但用typeof操作会返回一个对象。一般\n我们把将来用于保存对象的变量初始化为null."),a("br"),n._v(" "),a("strong",[n._v("undefined")]),n._v(":  这个类型只有一个值，在声明变量未进行赋值时，这个变量的值就是undefined."),a("br"),n._v(" "),a("strong",[n._v("Symbol")]),n._v(":  唯一的值。")]),n._v(" "),a("p",[n._v("JS中有三个基本数据类型是比较特殊的存在，分别是String、number、Boolean，这个三个基本数据类型有自己对应的包装对象。包装对象的设计目的，首先是使得“对象”这种类型可以覆盖 JavaScript 所有的值，整门语言有一个通用的数据模型，其次是使得原始类型的值也有办法调用自己的方法。在对基本类型数据进行操作时，首先会创建一个相应的对象代替，操作完之后并删除, 这就是我们可以直接使用'123'.split()等方法")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("new String('123') // String {\"123\"} 包装对象 包含String的属性和方法\nnew Number(123) // Number {123} \nnew Boolean(123)  // Boolean {true} \n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("Number、String和Boolean这三个原生对象，如果不作为构造函数调用（即调用时不加new），而是作为普通函数调用，将返回转换后的基本类型值，常常用于将任意类型的值转为数值、字符串和布尔值")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 字符串转为数值\nNumber('123') // 123\n\n// 数值转为字符串\nString(123) // \"123\"\n\n// 数值转为布尔值\nBoolean(123) // true\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[a("strong",[n._v("2. 引用数据类型")]),a("br"),n._v("\n不同于基本数据类型的原始值是直接保存在变量中，而引用类型的值存在于堆内存中，变量是一个指向实际对象所在位置的指针（或者说引用）")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var name = 'kk';\nvar city = 'chengdu';\n\nvar persion = { name: 'kk', city: 'chengdu' }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[n._v("栈")]),n._v(" "),a("th",{staticStyle:{"text-align":"center"}},[n._v("堆")])])]),n._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[n._v("name:  'kk'")]),n._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),n._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[n._v("city:  'chengdu'")]),n._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),n._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[n._v("persion：  xxxxxx内存地址---\x3e")]),n._v(" "),a("td",{staticStyle:{"text-align":"center"}},[n._v("{ name: 'kk', city: 'chengdu' }")])])])]),n._v(" "),a("p",[a("strong",[n._v("3. 类型判断方法")])]),n._v(" "),a("ul",[a("li",[n._v("原始类型判断"),a("br"),n._v("\n原始类型string、number、undefined、boolean、symbol、bigint都能通过typeof(返回字符串形式)直接判断类型，还有对象类型function也可判断"),a("br"),n._v("\n除了null无法通过typeof(为object)直接判断类型(历史遗留)，包括对象类型，typeof把null当作对象类型处理，所以typeof无法判断对象类型，typeof也能判断function")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('typeof \'123\'; // "string"\n\ntypeof undefined; // "undefined"\n\ntypeof 1 // "number"\n\ntypeof false // "boolean"\n\ntypeof Symbol() // "symbol"\n\ntypeof 1n // "bigint"\n\ntypeof null // "object"\n\ntypeof function a () {} // "function"\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("ul",[a("li",[n._v("非原始类型判断(以及null)"),a("br"),n._v("\ninstanceof: 用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链，所以在类的原型继承中，最后检测出来的结果未必是正确的.  而且instanceof后面必须更一个对象。\n不能检测基本类型")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var a = [], b = {}; function fn (){};\na instanceof Array; // true\na instanceof Object; // true\nb instanceof Object; // true\nfn instanceof Function; // true\nfn instanceof Object; // true\nnull instanceof Object; // false\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("constructor：每个构造函数的原型对象都有一个constructor属性，并且指向构造函数本身，由于我们可以手动修改 这个属性，所以结果也不是很准确。 不能检测null和undefined")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var a = [], function fn (){};\na.constructor === Array; // true\na.constructor === Object; // false\nfn.constructor === Function; // true\n''.constructor === String; // true\n(123).constructor === Number; // true\nfalse.constructor === Boolean // true\n...\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("Object.prototype.toString.call（最佳方案）:")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('Object.prototype.toString.call(\'\') === "[object String]"; // true\n\nObject.prototype.toString.call([]) === "[object Array]"; // true\n\nObject.prototype.toString.call(function a(){}) === "[object Function]"; // true\n\nObject.prototype.toString.call(null) === "[object Null]"; // true\n \nObject.prototype.toString.call(undefined) === "[object Undefined]"; // true\n\nObject.prototype.toString.call(1n) === "[object BigInt]"; // true\n\nObject.prototype.toString.call(Symbol()) === "[object Symbol]" // true\n...\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[a("strong",[n._v("4. 类型转换")]),a("br"),n._v("\njavaScript作为一门弱类型语言，本质为一个变量可以被赋予不同的数据类型。代码简洁灵活，但稍有\n不慎，会出现很多坑。"),a("br"),n._v("\njavaScript也作为一门动态类型语言，在运行时，可以随便改变其变量的结构。\n所以js变量可以做任意的类型转换，有两种方式，显式类型转换和隐式类型转换。\n但是能转换的类型只有三种：to Number,to String,to Boolean."),a("br"),n._v("\n只有'' 0 null undefined NaN false转换boolean为false,其他都为true\n当引用类型转换时，就稍微有些复杂，我们来举个例子：(所有对象转换boolean都为true)")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("let obj={\n    value:'你好啊',\n    num:2,\n    toString:function(){\n        return this.value\n    },\n    valueOf:function(){\n        return this.num\n    },   \n}\nconsole.log(obj+'明天')  //2明天\nconsole.log(obj+1)    // 3\nconsole.log(String(obj))   // 你好啊\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("当对象进行类型转换时："),a("br"),n._v("\n1.首先调用valueOf，如果执行结果是原始值，返回，如果不是下一步"),a("br"),n._v("\n2.其次调用toString,如果执行结果是原始值,返回，如果不是，报错。\n特殊情况:\n当使用显式类型转换成String时，执行顺序则是先调用toString,其次调用valueOf"),a("br"),n._v("\n显式类型转换:"),a("br"),n._v("\nNumber() / parseFloat() / parseInt()/String() / toString()/Boolean()"),a("br"),n._v("\n隐式类型转换：\n+ - == ！><= <= >=")]),n._v(" "),a("p",[n._v("先来看看 == 和 === 区别：")]),n._v(" "),a("p",[n._v("对于==的判断：")]),n._v(" "),a("ul",[a("li",[n._v("它会优先对比数据的类型是否一致")]),n._v(" "),a("li",[n._v("不一致则进行隐式转换，一致则判断值的大小，得出结果")]),n._v(" "),a("li",[n._v("继续判断两个类型是否为null与undefined，如果是则返回true")]),n._v(" "),a("li",[n._v("接着判断是否为string与number，如果是把string转换为number再对比大小")]),n._v(" "),a("li",[n._v("判断其中一方是否为boolean，如果是就转为number再进一步判断")]),n._v(" "),a("li",[n._v("判断一方是否为object，另一方为string、number、symbol，如果是则把object转为原始类型再判断"),a("br"),n._v("\n对于===的判断：")]),n._v(" "),a("li",[n._v("===属于严格判断，直接判断两者类型是否相同，不同则返回false")]),n._v(" "),a("li",[n._v("如果相同再比较大小，不会进行任何隐式转换")]),n._v(" "),a("li",[n._v("对于引用类型来说，比较的都是引用内存地址，所以===这种方式的比较，除非两者存储的内存地址相同才相等，反之false")])]),n._v(" "),a("p",[n._v("思考比较有意思的一道面试题：如何使 a==1 && a==2 && a==3 为true?    "),a("a",{attrs:{href:"https://juejin.im/post/6844904085930377229",target:"_blank",rel:"noopener noreferrer"}},[n._v("其他扩展查看"),a("OutboundLink")],1)]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const a = { value : 0 };\na.valueOf = function() {\n    return this.value += 1;\n};\n\nconsole.log(a==1 && a==2 && a==3); //true\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[a("strong",[n._v("5. 数据拷贝")]),a("br"),n._v("\n由于数据存储方式不同，对于引用数据而言，有了浅拷贝和深拷贝。浅拷贝是指拷贝地址，公用同一个堆内存，两个变量相互受影响，深拷贝使指，开辟一块内存空间，保存相同的值。互不受影响。")]),n._v(" "),a("ul",[a("li",[n._v("浅拷贝：\nObject.assign，contact,扩展运算符等。")]),n._v(" "),a("li",[n._v("深拷贝：\n1.JSON.parse(JSON.stringify(obj)) 无法拷贝undefined与symbol属性，无法拷贝循环引用对象  (var a={a：'123'}\na.c=a)"),a("br"),n._v("\n2.简单递归+循环")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("//简单版深拷贝，只能拷贝基本原始类型和普通对象与数组，无法拷贝循环引用\nfunction simpleDeepClone(a) {\n  const b=Array.isArray(a) ? [] : {}\n  for (const key of Object.keys(a)) {\n    const type = typeof a[key]\n    if (type !== 'object' || a[key] === null) {\n      b[key] = a[key]\n    } else {\n      b[key] = simpleDeepClone(a[key])\n    }\n  }\n  return b\n}\n//精简版深拷贝只能拷贝基本原始类型和普通对象与数组，可以拷贝循环引用\nfunction deepClone(a, weakMap = new WeakMap()) {\n  if (typeof a !== 'object' || a === null) return a\n  if (s = weakMap.get(a)) return s\n  const b = Array.isArray(a) ? [] : {}\n  weakMap.set(a, b)\n  for (const key of Object.keys(a)) b[key] = clone(a[key], weakMap)\n  return b\n}\n//js原生深拷贝，无法拷贝Symbol、null、循环引用\nfunction JSdeepClone(data) {\n  if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n    return data || undefined;\n  }\n  const constructor = data.constructor;\n  const result = new constructor();\n  for (const key in data) {\n    if (data.hasOwnProperty(key)) {\n      result[key] = deepClone(data[key]);\n    }\n  }\n  return result;\n}\n\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br")])]),a("p",[n._v("对于对象循环引用自己的拷贝比较复杂：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("//深拷贝具体版，非完全，但大部分都可以\nfunction deepClonePlus(a, weakMap = new WeakMap()) {\n  const type = typeof a\n  if (a === null || type !== 'object') return a\n  if (s = weakMap.get(a)) return s\n  const allKeys = Reflect.ownKeys(a)\n  const newObj = Array.isArray(a) ? [] : {}\n  weakMap.set(a, newObj)\n  for (const key of allKeys) {\n    const value = a[key]\n    const T = typeof value\n    if (value === null || T !== 'object') {\n      newObj[key] = value\n      continue\n    }\n    const objT = Object.prototype.toString.call(value)\n    if (objT === '[object Object]' || objT === '[object Array]') {\n      newObj[key] = deepClonePlus(value, weakMap)\n      continue\n    }\n    if (objT === '[object Set]' || objT === '[object Map]') {\n      if (objT === '[object Set]') {\n        newObj[key] = new Set()\n        value.forEach(v => newObj[key].add(deepClonePlus(v, weakMap)))\n      } else {\n        newObj[key] = new Map()\n        value.forEach((v, i) => newObj[key].set(i, deepClonePlus(v, weakMap)))\n      }\n      continue\n    }\n    if (objT === '[object Symbol]') {\n      newObj[key] = Object(Symbol.prototype.valueOf.call(value))\n      continue\n    }\n    newObj[key] = new a[key].constructor(value)\n  }\n  return newObj\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br")])]),a("p",[a("strong",[n._v("6. 每个数据类型的特点、用途")])]),n._v(" "),a("p",[n._v("常见的string、number等不再介绍，可结合用途具体使用，这里介绍一下Set和Map")]),n._v(" "),a("ul",[a("li",[n._v("Set")])]),n._v(" "),a("p",[n._v("Set对象是值的集合,值只会出现一次，元素是唯一的")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('let mySet = new Set();\n\nmySet.add(1); // Set [ 1 ]\nmySet.add(5); // Set [ 1, 5 ]\nmySet.add(5); // Set [ 1, 5 ]\nmySet.add("some text"); // Set [ 1, 5, "some text" ]\nlet o = {a: 1, b: 2};\nmySet.add(o);\n\nmySet.add({a: 1, b: 2}); // o 指向的是不同的对象，所以没问题\n\nmySet.has(1); // true\nmySet.has(3); // false\nmySet.has(5);              // true\nmySet.has(Math.sqrt(25));  // true\nmySet.has("Some Text".toLowerCase()); // true\nmySet.has(o); // true\n\nmySet.size; // 5\n\nmySet.delete(5);  // true,  从set中移除5\nmySet.has(5);     // false, 5已经被移除\n\nmySet.size; // 4, 刚刚移除一个值\n\nconsole.log(mySet); \n// logs Set(4) { 1, "some text", {…}, {…} } in Chrome\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("for (let [key, value] of mySet.entries()) console.log(key, value); //键与值相等 \n按顺序输出： \n1 1\nsome text some text\n{a: 1, b: 2} {a: 1, b: 2}\n{a: 1, b: 2} {a: 1, b: 2}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("Set常用于去除重复元素。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 去除数组的重复成员\n[...new Set([1,2,3,1,2,3])] // [1, 2, 3]\n\n// 去除重复字符\n[...new Set('abcabc')].join('') // 'abc'\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("ul",[a("li",[n._v("Map")])]),n._v(" "),a("p",[n._v("Map对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。它和 JS 对象不同，JS 对象只能用字符串和Symbol作为键，而Map可以使用任何值。")]),n._v(" "),a("p",[n._v("除了键类型上的不同，它和Object还有以下不同：")]),n._v(" "),a("p",[n._v("Map中的键值是有序的，而添加到对象中的键则不是。"),a("br"),n._v("\nMap可以通过size获取键值对个数，而Object的键值对个数只能手动计算。"),a("br"),n._v("\nMap可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。"),a("br"),n._v("\nObject都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然ES5开始可以用map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。"),a("br"),n._v("\nMap在涉及频繁增删键值对的场景下会有些性能优势。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const m = new Map();\n//.set(key, value) 添加成员\nm.set('name', 'nan').set('age', 18).set(symbol = Symbol('test'), 'test');\n//.size 成员数量\nconsole.log(m.size)  //2\n//.get(key) 读取成员 找不到返回undefined\nconsole.log(m.get(symbol))  //test\n//.has(key) 返回一个布尔值\nconsole.log(m.has('age'))  //true\n//.delete(key) 删除某个键 返回布尔值\nconsole.log(m.delete('age'))  //true\nconsole.log(m.has('age')) //false\n//.clear() 清空Map\nm.clear()\nconsole.log(m.size) //0\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const map = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nconsole.log([...map.keys()])\n// [1, 2, 3]\nconsole.log([...map.values()])\n// ['one', 'two', 'three']\nconsole.log([...map.entries()])\n// [[1,'one'], [2, 'two'], [3, 'three']]\n//等同于map.entries()\nfor (let [key, value] of map) {\n  console.log(key, value)\n}\n// 1 'one'\n// 2 'two'\n// 3 'three'\n\nmap.forEach(function(value, key, map) {\n  console.log(\"Key: %s, Value: %s\", key, value);\n});\n// Key: 1, Value: one\n// Key: 2, Value: two\n// Key: 3, Value: three\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br")])]),a("p",[a("strong",[n._v("7. 数据存储、读取及释放机制")])]),n._v(" "),a("p",[n._v("js具有自动垃圾回收机制：按照固定的时间间隔周期性找出那些不再继续使用的变量并释放其占用的内存空间。")]),n._v(" "),a("ul",[a("li",[n._v("标记清除"),a("br"),n._v("\n变量进入环境（比如在函数中声明一个变量）或离开环境会被标记跟踪，使用何种方式记录不重要，关键在于记录这种变化，然后垃圾回收器会周期性清除那些被标记为‘不再使用’的变量，然后释放其所占用的内存空间。")]),n._v(" "),a("li",[n._v("引用计数"),a("br"),n._v("\n顾名思义就是记录每个值被引用的次数，当声明一个变量并将一个引用类型值赋值给该变量时，这个值的引用次数就是1，如果同一个值又被赋值给另外一个变量，该值的引用次数加1，相反，对这个值引用的变量取得了另外一个值时，则该值的引用次数减1，当引用次数为0，说明没有变量引用它了，垃圾回收器回收时就会释放该值所占用的内存空间。 "),a("br"),a("br"),n._v("\n引用计数的弊端：循环引用")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function fun () {\n    var objA = {};\n    var objB = {};\n\n    objA.key1 = objB;\n    objB.key2 = objA\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("当fun()被调用执行时，如果采取的是引用计数回收策略，由于objA、objB通过各自的属性相互引用，它们的引用次数都是2，内存占用永远不会被回收。在一些情况下，我们可以手动切断值与变量之间的引用，比如obj = null, 从而实现内存释放。")]),n._v(" "),a("h2",{attrs:{id:"基础知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础知识点","aria-hidden":"true"}},[n._v("#")]),n._v(" 基础知识点")]),n._v(" "),a("p",[n._v("// TODO"),a("br"),n._v(" "),a("strong",[n._v("1. 变量、常量")])]),n._v(" "),a("p",[a("strong",[n._v("2. 作用域、作用域链")])]),n._v(" "),a("p",[a("strong",[n._v("3. this、执行上下文")])]),n._v(" "),a("p",[a("strong",[n._v("4. 闭包、高阶函数")])]),n._v(" "),a("p",[a("strong",[n._v("5. 构造函数、class、继承")])]),n._v(" "),a("p",[a("strong",[n._v("6. new 一个构造函数实现的过程")])]),n._v(" "),a("p",[a("strong",[n._v("7. 原型、原型链")])]),n._v(" "),a("p",[a("strong",[n._v("8.apply、call、bind实现")])]),n._v(" "),a("h2",{attrs:{id:"amd、cmd、commonjs与es6模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#amd、cmd、commonjs与es6模块化","aria-hidden":"true"}},[n._v("#")]),n._v(" AMD、CMD、CommonJS与ES6模块化")]),n._v(" "),a("h2",{attrs:{id:"bom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bom","aria-hidden":"true"}},[n._v("#")]),n._v(" BOM")]),n._v(" "),a("p",[n._v("// TODO")]),n._v(" "),a("h2",{attrs:{id:"dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom","aria-hidden":"true"}},[n._v("#")]),n._v(" DOM")]),n._v(" "),a("p",[n._v("// TODO")]),n._v(" "),a("h2",{attrs:{id:"存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储","aria-hidden":"true"}},[n._v("#")]),n._v(" 存储")]),n._v(" "),a("p",[n._v("// TODO")]),n._v(" "),a("h3",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie","aria-hidden":"true"}},[n._v("#")]),n._v(" Cookie")]),n._v(" "),a("h3",{attrs:{id:"session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session","aria-hidden":"true"}},[n._v("#")]),n._v(" Session")]),n._v(" "),a("h3",{attrs:{id:"cookie与session的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie与session的区别","aria-hidden":"true"}},[n._v("#")]),n._v(" cookie与session的区别")]),n._v(" "),a("h3",{attrs:{id:"本地存储localstorage与sessionstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地存储localstorage与sessionstorage","aria-hidden":"true"}},[n._v("#")]),n._v(" 本地存储localStorage与sessionStorage")]),n._v(" "),a("h2",{attrs:{id:"跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域","aria-hidden":"true"}},[n._v("#")]),n._v(" 跨域")]),n._v(" "),a("h2",{attrs:{id:"缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存","aria-hidden":"true"}},[n._v("#")]),n._v(" 缓存")]),n._v(" "),a("h3",{attrs:{id:"协商缓存与强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存与强缓存","aria-hidden":"true"}},[n._v("#")]),n._v(" 协商缓存与强缓存")])])},[],!1,null,null,null);s.default=t.exports}}]);